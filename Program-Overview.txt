Speech to Text Program Overview

1) Listen for audio input that can be interpreted as Speech
2) Output the speech to text in a file
3) Put the steps in a while loop to convert speech to text

======================================================================================

[NOTES]

Windows Install of Imports:

* Python Speech Recognition Module: pip install speechrecognition
* Python pyttsx3 Module: pip install pyttsx3 
        - You can change voice, speed and volume
        - If pyttsx3 is outdated: python.exe -m pip install --upgrade pip
* pip install pyaudio

MacOS Install of Imports:
* pip3 install speechrecognition
* brew install python3-pyaudio
* pip3 install pyaudio


Code Notes:

* adjust_for_ambient_noise is a method of the recognizer class from the speech_recognition package
* (source2, duration=0.2), it listens to the background noise for a short time, and adjusts the microphone 
  sensitivity (use calibrate). If you increase the duration, the calibration is better but there;s a short 
  wait before it starts listening to you

* f = open("output.txt", "a"), the "a" means append, so it will add to the end of the file instead of overwriting it
  once done, the file will be stored in the f (file) variable
* What open("output.txt", "a") does "a" means append mode. This just tells Python: “If the file exists, don’t erase it. 
  Add new stuff at the end. If it doesn’t exist, create it.” But it does not actually write anything yet. It just opens 
  the file handle.
* Why you still need f.write(text), f = open("output.txt", "a") → opens the file. f.write(text) → actually writes the 
  string into the file. If you skip f.write(text), nothing goes into the file, it just opens and closes.

* Context Manager (in Step 2), python automatically opens the file for you. When with with block finished (even if an 
  error happens), Python will close the file automatically


Code Adjustments & Explanation:
#Step 2: Old version
def output_text(speech_text):

    # Open a text file using the open function, this will allow us to access the output.txt file in the directory of the program. If there's no file, the program will create one automatically
    f = open("output.txt", "a")
    f.write(speech_text)
    f.write("\n")               #So that each text is on a new line if we say multiple things
    f.close()                   #Close the access file
    return speech_text

#Step 2: Adjusted
def output_text(speech_text):

    # Open a text file using the open function, this will allow us to access the output.txt file in the directory of the program. If there's no file, the program will create one automatically
    with open("output.txt", "a") as f:              #with open(...) as f, python creates a context manager.
        f.write(speech_text + "\n")
    return speech_text

#Is equivalent to
  f = open("output.txt", "a")
  try:
    f.write("hello\n")
  finally:
    f.close()

Run in Bash Terminal:

* touch output.txt (if no file)
* tail -f output.txt
        - This will show you the last 10 lines of the file, 
        - and the -f means keep following the file in real time (live monitoring)
* python speech_to_text.py (filename)
        - For MacOS use, python3 speech_to_text.py (filename)

Run in Cmd Terminal:
* cd "C:(add path)"
* python speech_to_text.py


Fix Install Precompiled PyAudio Wheel:
* Usual problem is that it often fails on Windows because PyAudio needs special C++ build tools to compile.
* Go to this link https://www.cgohlke.com/#pyaudio, and download the .whl file that matches your Python version.
* Install it using 
